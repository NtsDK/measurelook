/*Copyright 2017, 2016 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

((exports) => {
    exports.data = {};
})(typeof exports === 'undefined' ? this.EmptyBase = {} : exports);

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

((exports) => {
    exports.timeMarks = ['10', '12', '14', '16', '18', '20'];
})(typeof exports === 'undefined' ? this.Constants = {} : exports);

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names */

((exports) => {
    // argument description
    // add function name to log it
    // ignoreParams - make true if you don't need params in log.
    //     Example - createMaster params include password.
    // filter - add this function to filter out unnecessary calls.
    //     Example - we need all meta info calls except description.
    // rewrite - make true if you don't want to flood log with some repeated call.
    //     For example auto call of getDatabase will flood everything.
    exports.apiInfo = {
        baseAPI: {
            _init: null,
            getDatabase: { rewrite: true },
            setDatabase: { ignoreParams: true },
            getMetaInfo: null,
            setMetaInfo: {}
        },
        consistencyCheckAPI: {
            getConsistencyCheckResult: null
        },
        logAPI: {
            log: null,
            getLog: null
        },
        settingsAPI: {
            setBackgroundColor: {},
            setCharsheetBackMode: {},
            setCharsheetBackgroundColor: {}
        },
        charsheetAPI: {
            getProfileItem: null,
            setProfileItem: {},
            getAttribute: null,
            setAttribute: {},
            getAbility: null,
            setAbility: {},
            getVirtue: null,
            setVirtue: {},
            getState: null,
            setState: {},
            getHealth: null,
            setHealth: {},
            setBackground: {},
            setDiscipline: {},

            getBackstory: null,
            setBackstory: {},
            getAdvantages: null,
            renameAdvantage: {},
            getNotes: null,
            setNotes: {},
        },
    };


    // isServer - used in server mode. If false then user in logs will be named "user".
    // environment - used to disable this.log function in thin client in server version.
    //      I agree it is strange.
    exports.attachLogCalls = (LocalDBMS, R, isServer) => {
        const apiInfoObj = R.mergeAll(R.values(exports.apiInfo));
        const filteredApi = R.filter(R.compose(R.not, R.isNil), apiInfoObj);

        Object.keys(LocalDBMS.prototype)
            .filter(R.prop(R.__, filteredApi))
            .forEach((funcName) => {
                const oldFun = LocalDBMS.prototype[funcName];
                LocalDBMS.prototype[funcName] = function (...args) {
                    let accept = true;
                    if (filteredApi[funcName].filter) {
                        accept = filteredApi[funcName].filter(args);
                    }

                    if (accept) {
                        let userName = 'user';
                        if (isServer) {
                            userName = args[args.length - 1].name;
                        }

                        this.log(
                            userName, funcName, !!filteredApi[funcName].rewrite,
                            filteredApi[funcName].ignoreParams ? [] : args
                        );
                    }

                    return oldFun.apply(this, args);
                };
            });
    };
})(typeof exports === 'undefined' ? this.Logger = {} : exports);

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

((exports) => {
    exports.migrate = (data) => {
        if (!data.version) {
            data.version = '0.1.0';
        }
        if (data.version === '0.1.0') {
            data.measuredParams.forEach(el => (el.type = 'direct'));
            data.version = '0.2.0';
        }
        if (data.version === '0.2.0') {
            data.name = '';
            data.timestamp = '';
            data.version = '0.3.0';
        }
        return data;
    };
})(typeof exports === 'undefined' ? this.Migrator = {} : exports);

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

((callback) => {
    function Schema(exports, R, CommonUtils, Constants) {
        exports.getSchema = (base) => {
            const schema = {
                $schema: 'http://json-schema.org/draft-04/schema#',
                title: 'measurelook base',
                description: 'measurelook base schema.',
                type: 'object',
                definitions: {}
            };

            const directMeasuredParamsList = base.measuredParams.filter(param => param.type === 'direct')
                .map(param => param.name);
            const measuredParamsList = base.measuredParams.map(param => param.name);
            const paramList = R.concat(base.changedParams.map(param => param.name), measuredParamsList);
            schema.properties = {
                name: { type: 'string' },
                timestamp: { type: 'string' },
                meta: {},
                constantParams: constSchema(),
                changedParams: changedParamsSchema(),
                measuredParams: measuredParamsSchema(directMeasuredParamsList),
                measures: measuresSchema(paramList),
                version: { type: 'string' },
            };

            schema.required = R.keys(schema.properties);
            schema.additionalProperties = false;

            return schema;
        };

        function constSchema() {
            return {
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        units: {
                            type: 'string',
                        },
                        value: {
                            type: ['number', 'string']
                        },
                    },
                    required: ['name', 'units', 'value'],
                    additionalProperties: false
                }
            };
        }

        function changedParamsSchema() {
            return {
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        units: {
                            type: 'string',
                        }
                    },
                    required: ['name', 'units'],
                    additionalProperties: false
                }
            };
        }
        function measuredParamsSchema(directParamsList) {
            return {
                type: 'array',
                items: {
                    oneOf: [{
                        type: 'object',
                        properties: {
                            name: {
                                type: 'string'
                            },
                            units: {
                                type: 'string',
                            },
                            type: {
                                type: 'string',
                                enum: ['direct']
                            },
                        },
                        required: ['name', 'units', 'type'],
                        additionalProperties: false
                    }, {
                        type: 'object',
                        properties: {
                            name: {
                                type: 'string'
                            },
                            units: {
                                type: 'string',
                            },
                            type: {
                                type: 'string',
                                enum: ['indirect']
                            },
                            sumOf: {
                                type: 'array',
                                items: {
                                    type: 'string',
                                    enum: directParamsList
                                },
                                minItems: 0
                            },
                        },
                        required: ['name', 'units', 'type', 'sumOf'],
                        additionalProperties: false
                    }]
                }
            };
        }

        function measuresSchema(paramList) {
            const staticEls = {
                measureKey: {
                    type: 'string',
                    minLength: 0
                },
                passId: {
                    type: 'number'
                },
                raw: {}
            };

            const dynamicEls = paramList.reduce((acc, el) => {
                acc[el] = {
                    type: 'number'
                };
                return acc;
            }, {});

            return {
                type: 'object',
                additionalProperties: {
                    type: 'object',
                    properties: R.merge(staticEls, dynamicEls),
                    required: R.concat(R.keys(staticEls), R.keys(dynamicEls)),
                    additionalProperties: false
                }
            };
        }
    }

    callback(Schema);
})(api => ((typeof exports === 'undefined') ? api((this.Schema = {}), R, CommonUtils, Constants) : (module.exports = api)));

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/* eslint-disable func-names */

'use strict';

((callback2) => {
    function baseAPI(LocalDBMS, opts) {
        const { Migrator, CU, PC, EventEmitter, Constants } = opts;

        LocalDBMS.prototype.getDatabase = function (callback) {
            callback(null, this.bases[0]);
        };

        LocalDBMS.prototype.getBases = function (callback) {
            callback(null, this.bases);
        };

        const populateIndirectParams = (base) => {
            const indirectParams = base.measuredParams.filter(param => param.type === 'indirect');
            R.values(base.measures).forEach((measure) => {
                indirectParams.forEach((indirectParam) => {
                    measure[indirectParam.name] = R.sum(R.values(R.pick(indirectParam.sumOf, measure)));
                });
            });
        };

        LocalDBMS.prototype.setDatabase = function (database, callback) {
            database = Migrator.migrate(database);
            populateIndirectParams(database);
            this.bases = [database];
            if (callback) callback();
        };


        LocalDBMS.prototype._init = function (listeners) {
            this.ee = new EventEmitter();
            const that = this;
            const addListener = R.curry((triggerName, listener) => {
                that.ee.on(triggerName, listener.bind(that));
            });
            R.toPairs(listeners).forEach(([triggerName, listenerArr]) =>
                listenerArr.forEach(addListener(triggerName)));
        };
    }

    callback2(baseAPI);
})(api => (typeof exports === 'undefined' ? (this.baseAPI = api) : (module.exports = api)));

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

((callback2) => {
    function consistencyCheckAPI(LocalDBMS, opts) {
        const { R } = opts;
        const { CommonUtils } = opts;
        const validatorLib = opts.Ajv;
        const schemaBuilder = opts.Schema;

        // eslint-disable-next-line func-names
        LocalDBMS.prototype.getConsistencyCheckResult = function (callback) {
            let errors = [];
            const pushError = (str) => {
                errors.push(str);
            };

            const validator = validatorLib({ allErrors: true }); // options can be passed, e.g. {allErrors: true}

            this.bases.forEach((base) => {
                checkMeasures(base, pushError);
                checkParams(base, pushError);

                const schema = schemaBuilder.getSchema(base);
                const validate = validator.compile(schema);
                const valid = validate(base);
                if (!valid) {
                    errors = errors.concat(validate.errors);
                }
            });

            callback(null, errors);
        };

        const getErrorProcessor = callback => R.curry(R.compose(callback, CommonUtils.strFormat));

        function checkMeasures(data, callback) {
            const processError = getErrorProcessor(callback);
            R.keys(data.measures).forEach((elt) => {
                if (data.measures[elt].measureKey !== elt) {
                    processError(
                        'measureKey is inconsistent with measure id: measureKey {0}, measure id {1}',
                        [data.measures[elt].measureKey, elt]
                    );
                }
            });
        }

        function checkParams(data, callback) {
            const processError = getErrorProcessor(callback);

            const names = R.flatten([data.constantParams.map(R.prop('name')),
                data.changedParams.map(R.prop('name')),
                data.measuredParams.map(R.prop('name'))]);

            if (R.uniq(names).length !== names.length) {
                const diff = R.toPairs(R.groupBy(name => name, names))
                    .filter(pair => pair[1].length > 1)
                    .map(pair => pair[0]);
                processError('some param names are reused: difference {0}', [diff]);
            }

            if (R.difference(names, ['measureKey', 'passId', 'raw']).length !== names.length) {
                processError('measureKey, passId and raw are prohibited param names', []);
            }
        }
    }

    callback2(consistencyCheckAPI);
})(api => (typeof exports === 'undefined' ? (this.consistencyCheckAPI = api) : (module.exports = api)));

/*Copyright 2016 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

"use strict";

(function(exports){

	exports.data = {
	        "meta": {
	            "max": 120000,
	            "min": 20000,
	            "step": 20000,
	            "repeatNum": 5,
	            "description": "Experiment type standard-sort"
	          },
	          "constantParams": [
	            {
	              "name": "number upperBoundary",
	              "units": "float number",
	              "value": 1
	            },
	            {
	              "name": "number lowerBoundary",
	              "units": "float number",
	              "value": 0
	            }
	          ],
	          "changedParams": [
	            {
	              "name": "arraySize",
	              "units": "natural number"
	            }
	          ],
	          "measuredParams": [
	            {
	              "name": "duration_defaultSort",
	              "units": "millis"
	            }
	          ],
	          "measures": {
	            "20000_0": {
	              "measureKey": "20000_0",
	              "passId": 0,
	              "arraySize": 20000,
	              "raw": {
	                "defaultSort": {
	                  "start": 2355.42,
	                  "end": 2387.67
	                }
	              },
	              "duration_defaultSort": 32.25
	            },
	            "20000_1": {
	              "measureKey": "20000_1",
	              "passId": 1,
	              "arraySize": 20000,
	              "raw": {
	                "defaultSort": {
	                  "start": 2394.795,
	                  "end": 2411.86
	                }
	              },
	              "duration_defaultSort": 17.065000000000055
	            },
	            "20000_2": {
	              "measureKey": "20000_2",
	              "passId": 2,
	              "arraySize": 20000,
	              "raw": {
	                "defaultSort": {
	                  "start": 2417.755,
	                  "end": 2434.925
	                }
	              },
	              "duration_defaultSort": 17.170000000000073
	            },
	            "20000_3": {
	              "measureKey": "20000_3",
	              "passId": 3,
	              "arraySize": 20000,
	              "raw": {
	                "defaultSort": {
	                  "start": 2441.465,
	                  "end": 2458.29
	                }
	              },
	              "duration_defaultSort": 16.824999999999818
	            },
	            "20000_4": {
	              "measureKey": "20000_4",
	              "passId": 4,
	              "arraySize": 20000,
	              "raw": {
	                "defaultSort": {
	                  "start": 2465.37,
	                  "end": 2482.535
	                }
	              },
	              "duration_defaultSort": 17.164999999999964
	            },
	            "40000_0": {
	              "measureKey": "40000_0",
	              "passId": 0,
	              "arraySize": 40000,
	              "raw": {
	                "defaultSort": {
	                  "start": 2490.08,
	                  "end": 2526.035
	                }
	              },
	              "duration_defaultSort": 35.95499999999993
	            },
	            "40000_1": {
	              "measureKey": "40000_1",
	              "passId": 1,
	              "arraySize": 40000,
	              "raw": {
	                "defaultSort": {
	                  "start": 2533.11,
	                  "end": 2568.18
	                }
	              },
	              "duration_defaultSort": 35.06999999999971
	            },
	            "40000_2": {
	              "measureKey": "40000_2",
	              "passId": 2,
	              "arraySize": 40000,
	              "raw": {
	                "defaultSort": {
	                  "start": 2575.5950000000003,
	                  "end": 2610.1
	                }
	              },
	              "duration_defaultSort": 34.504999999999654
	            },
	            "40000_3": {
	              "measureKey": "40000_3",
	              "passId": 3,
	              "arraySize": 40000,
	              "raw": {
	                "defaultSort": {
	                  "start": 2617.55,
	                  "end": 2652.23
	                }
	              },
	              "duration_defaultSort": 34.679999999999836
	            },
	            "40000_4": {
	              "measureKey": "40000_4",
	              "passId": 4,
	              "arraySize": 40000,
	              "raw": {
	                "defaultSort": {
	                  "start": 2658.07,
	                  "end": 2692.355
	                }
	              },
	              "duration_defaultSort": 34.284999999999854
	            },
	            "60000_0": {
	              "measureKey": "60000_0",
	              "passId": 0,
	              "arraySize": 60000,
	              "raw": {
	                "defaultSort": {
	                  "start": 2700.525,
	                  "end": 2754.65
	                }
	              },
	              "duration_defaultSort": 54.125
	            },
	            "60000_1": {
	              "measureKey": "60000_1",
	              "passId": 1,
	              "arraySize": 60000,
	              "raw": {
	                "defaultSort": {
	                  "start": 2761.695,
	                  "end": 2814.835
	                }
	              },
	              "duration_defaultSort": 53.13999999999987
	            },
	            "60000_2": {
	              "measureKey": "60000_2",
	              "passId": 2,
	              "arraySize": 60000,
	              "raw": {
	                "defaultSort": {
	                  "start": 2822.415,
	                  "end": 2876.35
	                }
	              },
	              "duration_defaultSort": 53.934999999999945
	            },
	            "60000_3": {
	              "measureKey": "60000_3",
	              "passId": 3,
	              "arraySize": 60000,
	              "raw": {
	                "defaultSort": {
	                  "start": 2886.32,
	                  "end": 2941.85
	                }
	              },
	              "duration_defaultSort": 55.529999999999745
	            },
	            "60000_4": {
	              "measureKey": "60000_4",
	              "passId": 4,
	              "arraySize": 60000,
	              "raw": {
	                "defaultSort": {
	                  "start": 2949.59,
	                  "end": 3002.985
	                }
	              },
	              "duration_defaultSort": 53.39499999999998
	            },
	            "80000_0": {
	              "measureKey": "80000_0",
	              "passId": 0,
	              "arraySize": 80000,
	              "raw": {
	                "defaultSort": {
	                  "start": 3009.915,
	                  "end": 3085.62
	                }
	              },
	              "duration_defaultSort": 75.70499999999993
	            },
	            "80000_1": {
	              "measureKey": "80000_1",
	              "passId": 1,
	              "arraySize": 80000,
	              "raw": {
	                "defaultSort": {
	                  "start": 3093.735,
	                  "end": 3167.065
	                }
	              },
	              "duration_defaultSort": 73.32999999999993
	            },
	            "80000_2": {
	              "measureKey": "80000_2",
	              "passId": 2,
	              "arraySize": 80000,
	              "raw": {
	                "defaultSort": {
	                  "start": 3174.54,
	                  "end": 3247.855
	                }
	              },
	              "duration_defaultSort": 73.31500000000005
	            },
	            "80000_3": {
	              "measureKey": "80000_3",
	              "passId": 3,
	              "arraySize": 80000,
	              "raw": {
	                "defaultSort": {
	                  "start": 3255.545,
	                  "end": 3328.695
	                }
	              },
	              "duration_defaultSort": 73.15000000000009
	            },
	            "80000_4": {
	              "measureKey": "80000_4",
	              "passId": 4,
	              "arraySize": 80000,
	              "raw": {
	                "defaultSort": {
	                  "start": 3337.7000000000003,
	                  "end": 3410.705
	                }
	              },
	              "duration_defaultSort": 73.00499999999965
	            },
	            "100000_0": {
	              "measureKey": "100000_0",
	              "passId": 0,
	              "arraySize": 100000,
	              "raw": {
	                "defaultSort": {
	                  "start": 3423.0950000000003,
	                  "end": 3518.0750000000003
	                }
	              },
	              "duration_defaultSort": 94.98000000000002
	            },
	            "100000_1": {
	              "measureKey": "100000_1",
	              "passId": 1,
	              "arraySize": 100000,
	              "raw": {
	                "defaultSort": {
	                  "start": 3528.895,
	                  "end": 3625.035
	                }
	              },
	              "duration_defaultSort": 96.13999999999987
	            },
	            "100000_2": {
	              "measureKey": "100000_2",
	              "passId": 2,
	              "arraySize": 100000,
	              "raw": {
	                "defaultSort": {
	                  "start": 3634.255,
	                  "end": 3729.21
	                }
	              },
	              "duration_defaultSort": 94.95499999999993
	            },
	            "100000_3": {
	              "measureKey": "100000_3",
	              "passId": 3,
	              "arraySize": 100000,
	              "raw": {
	                "defaultSort": {
	                  "start": 3736.915,
	                  "end": 3831.11
	                }
	              },
	              "duration_defaultSort": 94.19500000000016
	            },
	            "100000_4": {
	              "measureKey": "100000_4",
	              "passId": 4,
	              "arraySize": 100000,
	              "raw": {
	                "defaultSort": {
	                  "start": 3839.51,
	                  "end": 3935.375
	                }
	              },
	              "duration_defaultSort": 95.86499999999978
	            },
	            "120000_0": {
	              "measureKey": "120000_0",
	              "passId": 0,
	              "arraySize": 120000,
	              "raw": {
	                "defaultSort": {
	                  "start": 3943.885,
	                  "end": 4062.1800000000003
	                }
	              },
	              "duration_defaultSort": 118.29500000000007
	            },
	            "120000_1": {
	              "measureKey": "120000_1",
	              "passId": 1,
	              "arraySize": 120000,
	              "raw": {
	                "defaultSort": {
	                  "start": 4070.015,
	                  "end": 4186.145
	                }
	              },
	              "duration_defaultSort": 116.13000000000056
	            },
	            "120000_2": {
	              "measureKey": "120000_2",
	              "passId": 2,
	              "arraySize": 120000,
	              "raw": {
	                "defaultSort": {
	                  "start": 4192.135,
	                  "end": 4311.43
	                }
	              },
	              "duration_defaultSort": 119.29500000000007
	            },
	            "120000_3": {
	              "measureKey": "120000_3",
	              "passId": 3,
	              "arraySize": 120000,
	              "raw": {
	                "defaultSort": {
	                  "start": 4320.13,
	                  "end": 4433.915
	                }
	              },
	              "duration_defaultSort": 113.78499999999985
	            },
	            "120000_4": {
	              "measureKey": "120000_4",
	              "passId": 4,
	              "arraySize": 120000,
	              "raw": {
	                "defaultSort": {
	                  "start": 4447.14,
	                  "end": 4566.835
	                }
	              },
	              "duration_defaultSort": 119.69499999999971
	            }
	          },
	          "version": "0.1.0"
	        }
;

})(typeof exports === 'undefined'? this['BaseExample']={}: exports);
//# sourceMappingURL=data:application/json;base64,
